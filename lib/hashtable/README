README for hashtable module
Kyle Dotterrer, April 2016
***********************************************************

Overview:

	The hashtable module allows users to store data
	of arbitrary type in a hashtable, allowing for
	efficient insertion, collision handling, and lookup. 

Exported Functions:

	> hashtable_t* hashtable_new(const int num_slots, void (*deletefunc)(void *data))
		create a new hashtable data structure
		specified number of slots must be greater than 0
		specified delete function must be non-void

	> void* hashtable_find(hashtable_t *ht, char *key)
		return the data corresponding to the specified key
		return NULL if key is not found in table

	> bool hashtable_insert(hashtable_t *ht, char *key, void *data)
		insert the specified key/data pair into hashtable
		insertion not performed if key already exists
		return true if insertion succeeds, false otherwise

	> void hashtable_delete(hashtable_t *ht)
		delete the entire data structure

Implementation:
	The hashtable module is implemented as an array of
	singly-linked lists. Jenkins' Hash function is used
	to generate hash values for the table entries. The 
	hashtable module implements the list module. See list
	module documentation for more information on the list. 

Assumptions:
	- the number of slots specified during
	  the creation of a new hashtable must
	  not be less than 1 (must be strictly)
	  greater than 0; NULL is returned if user
	  specifies a non-valid table size

	- the delete function provided to the hashtable
	  new function must not be void; a void delete
	  function is considered invalid, and the hashtable
	  new function returns NULL if given invalid delete

	- the hashtable does not except duplicate keys; if
	  the module user attempts to insert a key/data pair
	  where the key already exists in the table, this 
	  insertion will fail and the insertion function
	  will reflect this by returning 'false'

	- the module is not responsible for checking the 
	  validity of the specified delete function, beyond
	  the simple check that the delete function is non-NULL;
	  the module user is responsible for providing an
	  appropriate delete function that is able to properly
	  delete the data that they input

	- the module is not responsible for 'dangling pointers'
	  left behind by deletion of the hashtable structure;
	  the user is responsible for the pointer to the 
	  hashtable once the structure and its contents have
	  been deallocated by a call to hashtable_delete

Limitations:
	no module limitations